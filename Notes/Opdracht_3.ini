1. Rollen beheren (changerole.php)
📌 Doel: Admin kan rollen van gebruikers wijzigen
    a. UI-aanpassing in dashboard.php:

        Voeg een "Rol wijzigen" knop of link toe bij elke gebruiker (alleen zichtbaar voor admins).

    b. Nieuw bestand: changerole.php:

        Controleer of de huidige gebruiker een admin is.
        Toon formulier (dropdown met "admin" / "user").

        Verwerk POST-verzoek:
        
            Check: als gebruiker zichzelf wil downgraden of verwijderen → tel admins:
                SELECT COUNT(*) FROM users WHERE role = 'admin'

            Blokkeer actie als er nog maar één admin is.


✅ 2. Dynamisch menu in header.php
    📌 Doel: Menu past zich aan aan de loginstatus

        a. In templates/header.php:

            <?php if (Auth::isLoggedIn()): ?>
              <a href="dashboard.php">Dashboard</a>
              <a href="account.php">Mijn Account</a>
              <a href="/products/products.php">Producten</a>
              <a href="logout.php">Uitloggen</a>
            <?php else: ?>
              <a href="login.php">Inloggen</a>
              <a href="register.php">Registreren</a>
            <?php endif; ?>


✅ 3. Producten CRUD
    📌 Doel: Gebruikers beheren hun eigen producten

    a. Database:

        CREATE TABLE products (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT,
          naam VARCHAR(255),
          beschrijving TEXT,
          prijs DECIMAL(10,2),
          aangemaakt_op TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );


    b. Bestanden toevoegen in /products/:

        1. products.php - Overzicht van producten:
            Admin: ziet alles
            User: ziet alleen eigen producten
        2. product_add.php     -   Formulier + verwerking om product toe te voegen.
        3. product_edit.php    -   Alleen eigenaar of admin mag bewerken.
        4. product_delete.php  -   Alleen eigenaar of admin mag verwijderen.
        5. product_view.php    -   Detailweergave


    c. Productklasse aanmaken (classes/Product.php)

        Methoden:
            getAllProducts()
            getByUserId($user_id)
            getProductById($id)
            addProduct($data)
            updateProduct($id, $data)
            deleteProduct($id)
        
        Zorg voor PDO + prepared statements
        Escape output met htmlspecialchars()


✅ 4. Beveiliging & Controle
    Alle edit/delete-acties: controleer of huidige gebruiker eigenaar is of admin.
    Geen gevoelige acties via GET (zoals delete of rolwijziging).
    Controleer altijd Auth::isLoggedIn() en Auth::isAdmin() waar nodig.


📁 Bestandsstructuur uitbreiding:

    ├── changerole.php
    ├── /products/
    │   ├── products.php
    │   ├── product_add.php
    │   ├── product_edit.php
    │   ├── product_delete.php
    │   ├── product_view.php
    ├── /classes/
    │   └── Product.php


🎯 Eindresultaat:

    ✅ Admin kan rollen wijzigen (met controle op laatste admin)
    ✅ Menu past zich aan aan inlogstatus
    ✅ Product CRUD toegevoegd
    ✅ Gebruikers zien alleen eigen producten
    ✅ Admins zien alle producten